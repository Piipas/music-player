// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Artist         Artist?
  Playlist       Playlist[]
  History        History[]
  SongsLikes     SongsLikes[]
  ArtistsFollows ArtistsFollows[]
  PlaylistsLikes PlaylistsLikes[]

  @@map("users")
}

model Song {
  id        Int      @id @default(autoincrement())
  name      String
  duration  Int
  path      String
  image     String
  artist_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  History         History[]
  SongsCategories SongsCategories[]
  Likes           SongsLikes[]
  Playlists       PlaylistsSongs[]
  Artist          Artist            @relation(fields: [artist_id], references: [id])

  @@map("songs")
}

model Artist {
  id        Int      @id @default(autoincrement())
  name      String
  avatar    String
  cover     String
  user_id   Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User?            @relation(fields: [user_id], references: [id])
  Songs   Song[]
  Follows ArtistsFollows[]

  @@map("artists")
}

model Playlist {
  id        Int      @id @default(autoincrement())
  name      String
  user_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User  User             @relation(fields: [user_id], references: [id])
  Likes PlaylistsLikes[]
  Songs PlaylistsSongs[]

  @@map("playlists")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SongsCategories SongsCategories[]

  @@map("categories")
}

model History {
  id        Int      @id @default(autoincrement())
  song_id   Int
  user_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Song Song @relation(fields: [song_id], references: [id])
  User User @relation(fields: [user_id], references: [id])
}

model SongsCategories {
  category_id Int
  song_id     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Category Category @relation(fields: [category_id], references: [id])
  Song     Song     @relation(fields: [song_id], references: [id])

  @@unique([category_id, song_id], name: "category_song_id")
}

model SongsLikes {
  song_id   Int
  user_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Song Song @relation(fields: [song_id], references: [id])
  User User @relation(fields: [user_id], references: [id])

  @@unique([song_id, user_id], name: "song_user_id")
}

model ArtistsFollows {
  artist_id Int
  user_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Artist Artist @relation(fields: [artist_id], references: [id])
  User   User   @relation(fields: [user_id], references: [id])

  @@unique([artist_id, user_id], name: "artist_user_id")
}

model PlaylistsLikes {
  playlist_id Int
  user_id     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Playlist Playlist @relation(fields: [playlist_id], references: [id])
  User     User     @relation(fields: [user_id], references: [id])

  @@unique([playlist_id, user_id], name: "playlist_user_id")
}

model PlaylistsSongs {
  playlist_id Int
  song_id     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Playlist Playlist @relation(fields: [playlist_id], references: [id])
  Song     Song     @relation(fields: [song_id], references: [id])

  @@unique([playlist_id, song_id], name: "playlist_song_id")
}
